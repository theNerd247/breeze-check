{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE OverloadedStrings #-}

module Main where

import Elm
import Data.Breeze
import Data.Data (Proxy(..))
import Data.Text (pack, unpack)
import Control.Monad.Writer.Class (tell)
import Data.Monoid (mempty, (<>))
import Data.Time (getCurrentTime, UTCTime)

spec :: UTCTime -> Spec
spec t = 
  moduleSpecWith ops ["Data"] $ do
    tell (mempty, ["-- This file is autogenerated! Please do not edit!"])
    tell (mempty, ["-- Generated on: " <> (pack . show $ t)])
    makeAlias "CheckInGroupId" "Int"
    makeAlias "ChurchInfo" "String"
    makeAlias "Email" "String"
    makeAlias "EventId" "String"
    makeAlias "FirstName" "String"
    makeAlias "LastName" "String"
    makeAlias "PersonId" "Int"
    makeAlias "Phone" "String"
    makeAlias "TempPersonId" "PersonId"
    makeElm (Proxy :: Proxy BreezeException)
    makeElm (Proxy :: Proxy Person)
    makeElm (Proxy :: Proxy Name)
    makeElm (Proxy :: Proxy CheckInStatus)
    makeElm (Proxy :: Proxy NewPersonInfo)
    makeElm (Proxy :: Proxy Address)
    makeElm (Proxy :: Proxy EventInfo)
  where
    makeElm p = do
      renderType p
      renderDecoder p
      renderEncoder p
    ops = defaultOptions 
      { elmRecordFieldModifier = modNames
      , jsonKeyModifier = modNames
      }
    modNames = pack . removeUnderscorePrefix . unpack

makeAlias a t =
  tell (mempty, ["type alias " <> a <> " = " <> t])


main = do
  let elmDir = "../ui/src/"
  t <- getCurrentTime
  putStrLn $ "Saving elm types to: " ++ elmDir
  specsToDir [spec t] elmDir
